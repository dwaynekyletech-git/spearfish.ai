# GitHub Actions Workflow: Daily GitHub Sync
# Runs daily to synchronize GitHub repository data

name: Daily GitHub Sync

on:
  schedule:
    # Run daily at 2 AM UTC (during low usage hours)
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      sync_type:
        description: 'Type of sync to execute'
        required: true
        default: 'incremental'
        type: choice
        options:
          - incremental
          - full

jobs:
  github-sync:
    name: Sync GitHub Data
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Trigger GitHub Sync
        run: |
          echo "🚀 Starting GitHub sync job..."
          
          # Set sync type from input or default to incremental
          SYNC_TYPE="${{ github.event.inputs.sync_type || 'incremental' }}"
          echo "Sync type: $SYNC_TYPE"
          
          # Call the cron endpoint
          response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.CRON_SECRET }}" \
            -H "Content-Type: application/json" \
            -d "{\"sync_type\":\"$SYNC_TYPE\"}" \
            "${{ secrets.APP_URL }}/api/cron/github-sync")
          
          # Extract HTTP status and body
          http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo $response | sed -e 's/HTTPSTATUS:.*//g')
          
          echo "HTTP Status: $http_code"
          echo "Response: $body"
          
          # Check if successful
          if [ $http_code -eq 200 ]; then
            echo "✅ GitHub sync completed successfully"
            
            # Extract sync statistics
            processed=$(echo $body | jq -r '.data.repositories_processed // 0')
            failed=$(echo $body | jq -r '.data.repositories_failed // 0')
            
            echo "📊 Sync Results:"
            echo "- Repositories processed: $processed"
            echo "- Repositories failed: $failed"
            
            # Create job summary
            echo "## GitHub Sync Results 📊" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Sync Type:** $SYNC_TYPE" >> $GITHUB_STEP_SUMMARY
            echo "**Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
            echo "**Repositories Processed:** $processed" >> $GITHUB_STEP_SUMMARY
            echo "**Repositories Failed:** $failed" >> $GITHUB_STEP_SUMMARY
            echo "**Execution Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
            
          else
            echo "❌ GitHub sync failed with status $http_code"
            echo "Response: $body"
            
            # Create failure summary
            echo "## GitHub Sync Results ❌" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Sync Type:** $SYNC_TYPE" >> $GITHUB_STEP_SUMMARY
            echo "**Status:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
            echo "**HTTP Status:** $http_code" >> $GITHUB_STEP_SUMMARY
            echo "**Error:** See job logs for details" >> $GITHUB_STEP_SUMMARY
            echo "**Execution Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
            
            exit 1
          fi

  notify-on-failure:
    name: Notify on Failure
    needs: github-sync
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - name: Create Issue on Failure
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Daily GitHub Sync Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## GitHub Sync Job Failed
            
            The scheduled GitHub sync job failed to complete successfully.
            
            **Details:**
            - **Workflow Run:** [${context.runNumber}](${context.payload.repository.html_url}/actions/runs/${context.runId})
            - **Branch:** ${context.ref}
            - **Triggered:** ${context.eventName}
            - **Failed at:** ${new Date().toISOString()}
            
            **Next Steps:**
            1. Check the workflow logs for error details
            2. Verify GitHub API rate limits
            3. Check application health and connectivity
            4. Consider running a manual sync if needed
            
            **Manual Sync Command:**
            \`\`\`bash
            curl -X POST \\
              -H "Authorization: Bearer $CRON_SECRET" \\
              -H "Content-Type: application/json" \\
              -d '{"sync_type":"incremental"}' \\
              "$APP_URL/api/cron/github-sync"
            \`\`\`
            
            This issue will auto-close when the next sync succeeds.
            `;
            
            // Check if there's already an open issue for sync failures
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'github-sync-failure'
            });
            
            if (issues.data.length === 0) {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['bug', 'github-sync-failure', 'automated']
              });
              console.log('Created failure notification issue');
            } else {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: `🚨 **Another sync failure occurred**\n\nWorkflow run: [${context.runNumber}](${context.payload.repository.html_url}/actions/runs/${context.runId})\nFailed at: ${new Date().toISOString()}`
              });
              console.log('Updated existing failure notification issue');
            }

  close-failure-issues:
    name: Close Failure Issues on Success
    needs: github-sync
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Close Previous Failure Issues
        uses: actions/github-script@v7
        with:
          script: |
            // Find and close any open sync failure issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'github-sync-failure'
            });
            
            for (const issue of issues.data) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `✅ **Sync is working again!**\n\nThe GitHub sync job completed successfully. This issue is now resolved.\n\nWorkflow run: [${context.runNumber}](${context.payload.repository.html_url}/actions/runs/${context.runId})\nCompleted at: ${new Date().toISOString()}`
              });
              
              console.log(`Closed failure issue #${issue.number}`);
            }
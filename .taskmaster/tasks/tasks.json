{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Project Foundation and Authentication",
        "description": "Initialize Next.js project with TypeScript and integrate Clerk authentication with social login options",
        "details": "Create Next.js 14+ project with TypeScript, ESLint, and Tailwind CSS. Install and configure Clerk authentication with Google, GitHub, and LinkedIn social providers. Set up environment variables for Clerk keys. Create authentication middleware and protected route patterns. Implement user registration/login flows with proper error handling and redirects.",
        "testStrategy": "Test social login flows for each provider, verify JWT token generation, test protected route access, and validate user session persistence across browser refreshes",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize Next.js Project with TypeScript and Core Dependencies",
            "description": "Create a new Next.js 14+ project with TypeScript, ESLint, and Tailwind CSS configuration",
            "dependencies": [],
            "details": "Run 'npx create-next-app@latest' with TypeScript and Tailwind CSS options. Configure ESLint for TypeScript. Set up project structure with proper TypeScript configuration in tsconfig.json. Install additional dependencies like @types/node. Verify the development server runs correctly.",
            "status": "done",
            "testStrategy": "Verify project builds without errors and development server starts successfully"
          },
          {
            "id": 2,
            "title": "Install and Configure Clerk Authentication Package",
            "description": "Install Clerk authentication package and set up basic configuration with environment variables",
            "dependencies": [
              1
            ],
            "details": "Install @clerk/nextjs package. Create .env.local file with NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY and CLERK_SECRET_KEY placeholders. Configure Clerk provider in app layout or _app.tsx. Set up basic Clerk configuration object with domain and appearance settings.",
            "status": "done",
            "testStrategy": "Verify Clerk package imports correctly and environment variables are properly loaded"
          },
          {
            "id": 3,
            "title": "Configure Social Login Providers",
            "description": "Set up Google, GitHub, and LinkedIn OAuth applications and configure them in Clerk dashboard",
            "dependencies": [
              2
            ],
            "details": "Create OAuth applications in Google Cloud Console, GitHub Developer Settings, and LinkedIn Developer Portal. Configure redirect URLs for each provider. Add social provider configurations in Clerk dashboard. Update environment variables with OAuth client IDs and secrets. Configure social login options in Clerk settings.",
            "status": "done",
            "testStrategy": "Test social login flows manually through Clerk's development environment"
          },
          {
            "id": 4,
            "title": "Implement Authentication Middleware and Route Protection",
            "description": "Create Next.js middleware for authentication and set up protected route patterns",
            "dependencies": [
              3
            ],
            "details": "Create middleware.ts file in project root. Implement Clerk's authMiddleware to protect routes. Define public and private route patterns. Set up redirect logic for unauthenticated users. Configure middleware matcher for specific route patterns. Create higher-order component or hook for client-side route protection.",
            "status": "done",
            "testStrategy": "Test route protection by accessing protected routes without authentication and verify proper redirects"
          },
          {
            "id": 5,
            "title": "Build User Registration and Login Flow Components",
            "description": "Create authentication UI components with proper error handling and user flow management",
            "dependencies": [
              4
            ],
            "details": "Create SignIn and SignUp components using Clerk's pre-built components or custom implementations. Implement error handling for authentication failures. Set up post-authentication redirects to appropriate pages. Create user profile management components. Add loading states and proper UX feedback. Implement sign-out functionality.",
            "status": "done",
            "testStrategy": "Test complete user flows including registration, login, profile access, and logout with various error scenarios"
          }
        ]
      },
      {
        "id": 2,
        "title": "Setup Supabase Database and Schema",
        "description": "Configure Supabase PostgreSQL database with complete schema for companies, users, and artifacts",
        "details": "Set up Supabase project and configure database connection. Create companies table with YC data fields (id, yc_id, name, batch, stage, team_size, is_ai_related, spearfish_score, github_repos, huggingface_models, etc.). Create user_profiles table synced with Clerk user data. Create artifacts table for templates and completions. Set up RLS policies, indexes for performance, and real-time subscriptions. Configure database migrations and seed data.",
        "testStrategy": "Test database connections, verify table creation and constraints, test RLS policies with different user roles, validate data integrity and foreign key relationships",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize Supabase Project and Database Connection",
            "description": "Create new Supabase project, configure environment variables, and establish database connection in the Next.js application",
            "dependencies": [],
            "details": "Create a new Supabase project through the dashboard. Set up environment variables (.env.local) with NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY. Install @supabase/supabase-js and create a Supabase client instance in src/lib/supabase.ts. Configure the client with proper TypeScript types and authentication settings. Test the connection by running a simple query.",
            "status": "done",
            "testStrategy": "Create a simple API route that tests database connectivity by running a basic SELECT query. Verify environment variables are properly loaded and the Supabase client initializes without errors."
          },
          {
            "id": 2,
            "title": "Create Core Database Tables (Companies, Users, Artifacts)",
            "description": "Design and create the main database tables with proper column definitions, primary keys, and foreign key relationships",
            "dependencies": [
              1
            ],
            "details": "Create companies table with columns: id (uuid), yc_id (text unique), name (text), batch (text), stage (text), team_size (integer), is_ai_related (boolean), spearfish_score (numeric), github_repos (jsonb), huggingface_models (jsonb), website_url (text), description (text), created_at (timestamp), updated_at (timestamp). Create user_profiles table: id (uuid), clerk_user_id (text unique), email (text), full_name (text), company_id (uuid references companies), role (text), created_at, updated_at. Create artifacts table: id (uuid), company_id (uuid references companies), created_by (uuid references user_profiles), type (text), title (text), content (jsonb), metadata (jsonb), is_template (boolean), parent_artifact_id (uuid self-reference), created_at, updated_at.",
            "status": "done",
            "testStrategy": "Write migration scripts that can be rolled back. Test table creation in a development environment first. Verify all foreign key constraints work correctly by inserting test data with proper relationships."
          },
          {
            "id": 3,
            "title": "Implement Row Level Security (RLS) Policies",
            "description": "Configure comprehensive RLS policies to ensure data security and proper access control based on user authentication and company membership [Updated: 7/11/2025]",
            "dependencies": [
              2
            ],
            "details": "Enable RLS on all tables. For companies table: allow public read for basic info, restrict write to company admins. For user_profiles: users can read/update their own profile, company members can view teammates. For artifacts: implement policies based on company membership - users can CRUD their company's artifacts, read public templates. Create helper functions in PostgreSQL for checking user permissions. Set up service role key for admin operations. Configure policies to work with Clerk JWT claims.\n<info added on 2025-07-12T01:26:07.085Z>\nI cannot generate new content to append to this subtask based on the request \"Show current implementation notes and progress\". This request is asking to view existing information, not to add new content. The subtask already contains implementation details about RLS policies, and there's no new information to add without actual implementation work being done or reported.\n</info added on 2025-07-12T01:26:07.085Z>",
            "status": "done",
            "testStrategy": "Create test scenarios for different user roles and permissions. Verify that users can only access their company's data. Test that public templates are readable by all authenticated users. Ensure service role bypasses RLS for admin operations."
          },
          {
            "id": 4,
            "title": "Create Database Indexes and Optimize Performance",
            "description": "Design and implement strategic indexes for query performance, configure real-time subscriptions, and optimize for common access patterns",
            "dependencies": [
              3
            ],
            "details": "Create indexes on: companies(yc_id), companies(batch), companies(is_ai_related), user_profiles(clerk_user_id), user_profiles(company_id), artifacts(company_id, type), artifacts(is_template), artifacts(created_by). Set up composite indexes for common query patterns. Configure btree indexes for sorting operations on created_at/updated_at. Create GIN indexes on JSONB columns (github_repos, huggingface_models, content) for efficient JSON queries. Enable real-time subscriptions on artifacts table for live updates. Configure connection pooling settings.",
            "status": "done",
            "testStrategy": "Use EXPLAIN ANALYZE to verify index usage in common queries. Benchmark query performance before and after index creation. Test real-time subscriptions with multiple concurrent connections."
          },
          {
            "id": 5,
            "title": "Setup Database Migrations and Seed Data",
            "description": "Implement a robust migration system for schema versioning and create comprehensive seed data for development and testing",
            "dependencies": [
              4
            ],
            "details": "Set up Supabase migrations using the CLI (supabase/migrations folder). Create numbered migration files for each schema change. Implement seed.sql with sample YC companies data including realistic spearfish_scores, GitHub repos, and HuggingFace models. Create template artifacts for common use cases (pitch decks, product roadmaps, technical documentation). Set up npm scripts for running migrations: 'db:migrate', 'db:reset', 'db:seed'. Document migration procedures in README. Create a migration for Clerk webhook integration to sync user data.",
            "status": "done",
            "testStrategy": "Test migrations on a fresh database to ensure they run in correct order. Verify seed data creates valid relationships between tables. Test rollback procedures for each migration. Ensure development environment can be quickly reset with fresh seed data."
          },
          {
            "id": 6,
            "title": "Create Supabase project and configure database connection",
            "description": "Set up new Supabase project, obtain connection strings, and configure environment variables for database access",
            "dependencies": [],
            "details": "Create Supabase account/project, get database URL and anon key, set up .env.local with SUPABASE_URL and SUPABASE_ANON_KEY, install @supabase/supabase-js client library, create initial database connection utility",
            "status": "done",
            "testStrategy": "Test database connection by running a simple query to verify connectivity and authentication"
          },
          {
            "id": 7,
            "title": "Design and create companies table schema",
            "description": "Create comprehensive companies table with YC data fields and appropriate data types",
            "dependencies": [
              6
            ],
            "details": "Create companies table with fields: id (uuid primary key), yc_id (text unique), name (text), batch (text), stage (text), team_size (integer), is_ai_related (boolean), spearfish_score (numeric), github_repos (jsonb), huggingface_models (jsonb), website_url (text), description (text), created_at/updated_at timestamps",
            "status": "done",
            "testStrategy": "Insert sample company data and verify all fields accept correct data types, test unique constraints on yc_id"
          },
          {
            "id": 8,
            "title": "Create user_profiles table with Clerk integration",
            "description": "Set up user_profiles table that syncs with Clerk authentication data",
            "dependencies": [
              6
            ],
            "details": "Create user_profiles table with fields: id (uuid primary key), clerk_user_id (text unique), email (text), first_name (text), last_name (text), profile_image_url (text), created_at/updated_at timestamps. Set up triggers or webhooks for Clerk user sync",
            "status": "done",
            "testStrategy": "Test user profile creation on Clerk signup, verify data synchronization between Clerk and Supabase"
          },
          {
            "id": 9,
            "title": "Design and implement artifacts table schema",
            "description": "Create artifacts table for storing templates and completions with proper relationships",
            "dependencies": [
              7,
              8
            ],
            "details": "Create artifacts table with fields: id (uuid primary key), user_id (uuid foreign key to user_profiles), company_id (uuid foreign key to companies), type (enum: template/completion), title (text), content (text), metadata (jsonb), is_public (boolean), created_at/updated_at timestamps",
            "status": "done",
            "testStrategy": "Test artifact creation, verify foreign key relationships work correctly, test different artifact types"
          },
          {
            "id": 10,
            "title": "Configure RLS policies, indexes, and real-time subscriptions",
            "description": "Set up Row Level Security policies, performance indexes, and real-time features",
            "dependencies": [
              7,
              8,
              9
            ],
            "details": "Create RLS policies for secure data access (users can only access their own data), add indexes on frequently queried fields (yc_id, user_id, company_id, created_at), enable real-time subscriptions for artifacts table, set up database migrations structure",
            "status": "done",
            "testStrategy": "Test RLS policies with different user scenarios, verify query performance with indexes, test real-time updates in application"
          }
        ]
      },
      {
        "id": 3,
        "title": "Y Combinator API Integration with AI Company Classification",
        "description": "Integrate YC API to fetch all companies and implement AI classification system for target batches",
        "details": "Build YC API integration to fetch companies from W22, S22, W23 batches. Implement AI classification using OpenAI GPT-4 to identify AI-related companies based on descriptions and industry tags. Create data sync jobs to update company information daily. Store classified companies in Supabase with AI-related flag. Handle API rate limiting and error scenarios gracefully.",
        "testStrategy": "Test API integration with YC endpoints, validate AI classification accuracy on sample companies, test data synchronization and duplicate handling, verify error handling for API failures",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Set up Y Combinator API client and authentication",
            "description": "Create API client for Y Combinator's public API with proper authentication and base configuration",
            "dependencies": [],
            "details": "Research YC's public API endpoints and authentication requirements. Create a dedicated API client class with proper error handling, request/response typing, and configuration management. Set up environment variables for API credentials if required.",
            "status": "done",
            "testStrategy": "Unit tests for API client initialization, authentication flow, and basic connectivity. Mock API responses for consistent testing."
          },
          {
            "id": 2,
            "title": "Implement company data fetching for target batches",
            "description": "Build functions to fetch company data from W22, S22, and W23 batches with rate limiting and pagination",
            "dependencies": [
              1
            ],
            "details": "Implement batch-specific data fetching with proper pagination handling. Add rate limiting to respect API quotas. Include retry logic with exponential backoff for failed requests. Parse and validate company data structure including name, description, industry, batch info.",
            "status": "done",
            "testStrategy": "Integration tests with YC API (using test data). Unit tests for pagination, rate limiting, and error handling scenarios."
          },
          {
            "id": 3,
            "title": "Develop AI classification system using OpenAI GPT-4",
            "description": "Create AI-powered classification to identify AI-related companies based on descriptions and industry tags",
            "dependencies": [],
            "details": "Design classification prompts for GPT-4 to analyze company descriptions and determine AI relevance. Include classification criteria for various AI domains (ML, computer vision, NLP, etc.). Implement confidence scoring and result validation. Handle edge cases and ambiguous classifications.",
            "status": "done",
            "testStrategy": "Test with known AI companies for accuracy validation. Unit tests for prompt construction and response parsing. Performance tests for classification speed."
          },
          {
            "id": 4,
            "title": "Build Supabase database schema and data storage layer",
            "description": "Design and implement database schema for storing YC companies with AI classification flags and metadata",
            "dependencies": [],
            "details": "Create companies table with fields for YC data (name, description, batch, industry) and AI classification results (is_ai_related, confidence_score, classification_date). Implement data access layer with CRUD operations. Add indexes for efficient querying and filtering.",
            "status": "done",
            "testStrategy": "Database integration tests for schema creation and data operations. Test data integrity constraints and query performance."
          },
          {
            "id": 5,
            "title": "Implement daily sync job with error handling and monitoring",
            "description": "Create automated daily sync process to update company data and classifications with comprehensive error handling",
            "dependencies": [
              2,
              3,
              4
            ],
            "details": "Build scheduled job to fetch latest YC data, run AI classifications, and update database. Implement comprehensive error handling for API failures, AI service issues, and database problems. Add logging and monitoring for sync status tracking. Include data deduplication and conflict resolution.",
            "status": "done",
            "testStrategy": "End-to-end testing of sync process. Error scenario testing (API down, AI service timeout, database issues). Performance testing for large data volumes."
          }
        ]
      },
      {
        "id": 4,
        "title": "Spearfish Scoring Algorithm Implementation",
        "description": "Implement comprehensive weighted scoring system based on spearfishing methodology criteria",
        "details": "Create spearfish scoring algorithm with weighted criteria: Heavy weight (W22/S22/W23 batches), High weight (18-24 months age, Series A stage), Medium weight (GitHub star growth >1K/month, B2B focus, HuggingFace activity >100K downloads), Low weight (conference presence, boring names, hiring status). Implement score calculation function (0-100) and daily recalculation job. Store scores in database with timestamp tracking.",
        "testStrategy": "Test scoring algorithm with known company data, validate weight calculations, test score updates with changing data, verify score distribution across company dataset",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Define and Document Scoring Criteria and Weights",
            "description": "Identify and clearly document all spearfishing methodology criteria and assign appropriate weights (heavy, high, medium, low) as specified for each batch, age, stage, and activity metric.",
            "dependencies": [],
            "details": "Ensure criteria are specific, measurable, and aligned with project goals. Collaborate with stakeholders to confirm accuracy and completeness of the criteria and their weights.",
            "status": "done",
            "testStrategy": "Review documentation with stakeholders and verify that all required criteria and weights are present and unambiguous."
          },
          {
            "id": 2,
            "title": "Design Scoring Calculation Logic",
            "description": "Develop the algorithm to calculate a composite score (0-100) for each entity based on the defined weighted criteria.",
            "dependencies": [
              1
            ],
            "details": "Implement logic to multiply each criterion's score by its weight, sum the results, and normalize to a 0-100 scale. Ensure the algorithm can handle missing or partial data gracefully.",
            "status": "done",
            "testStrategy": "Unit test the calculation logic with sample data sets to verify correct weighted scoring and normalization."
          },
          {
            "id": 3,
            "title": "Implement Score Calculation Function",
            "description": "Code the function that takes entity data as input and outputs the calculated spearfish score using the designed algorithm.",
            "dependencies": [
              2
            ],
            "details": "Develop the function in the target programming language, ensuring it is modular, testable, and efficient. Include error handling for invalid or incomplete input.",
            "status": "done",
            "testStrategy": "Write automated tests to validate function output against expected scores for a variety of input scenarios."
          },
          {
            "id": 4,
            "title": "Develop Daily Score Recalculation Job",
            "description": "Create a scheduled job that recalculates scores for all entities daily and updates the results.",
            "dependencies": [
              3
            ],
            "details": "Implement a job scheduler (e.g., cron, cloud scheduler) to trigger the score calculation function for all relevant entities every 24 hours.",
            "status": "done",
            "testStrategy": "Simulate daily runs in a test environment and verify that all entities are recalculated and updated as expected."
          },
          {
            "id": 5,
            "title": "Store Scores with Timestamp Tracking in Database",
            "description": "Design and implement database schema and logic to store calculated scores along with timestamps for each entity.",
            "dependencies": [
              4
            ],
            "details": "Ensure the database can efficiently store, retrieve, and update scores, and that each score entry is associated with a precise calculation timestamp for auditability.",
            "status": "done",
            "testStrategy": "Test database operations for storing, retrieving, and updating scores, and confirm timestamp accuracy and integrity."
          }
        ]
      },
      {
        "id": 5,
        "title": "Company Discovery Interface with Search and Filtering",
        "description": "Build main company discovery interface with ranked display, search, and basic filtering capabilities",
        "details": "Create responsive company discovery page showing all AI companies ranked by spearfish score. Implement company cards with key metrics (score, batch, team size, growth indicators). Add text search across names, descriptions, and industries. Build filtering system for batch, team size, and hiring status. Implement semantic search using OpenAI embeddings for better query understanding. Add pagination and infinite scroll for performance.",
        "testStrategy": "Test search functionality with various queries, validate filtering combinations, test performance with large datasets, verify responsive design across devices",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Responsive Company Discovery Page Layout",
            "description": "Create a responsive layout for the company discovery interface that adapts seamlessly across devices and screen sizes.",
            "dependencies": [],
            "details": "Apply user-centered and cross-platform design principles to ensure the interface is visually appealing and functional on desktop and mobile. Incorporate branding and visual identity elements for consistency.",
            "status": "done",
            "testStrategy": "Test layout responsiveness using multiple device simulators and browsers; validate visual consistency and usability."
          },
          {
            "id": 2,
            "title": "Implement Ranked Company Cards with Key Metrics",
            "description": "Develop company cards that display essential metrics such as spearfish score, batch, team size, and growth indicators, and ensure companies are ranked accordingly.",
            "dependencies": [
              1
            ],
            "details": "Design and build reusable card components that clearly present all required data. Ensure ranking logic is applied to the display order.",
            "status": "done",
            "testStrategy": "Verify that all metrics are displayed correctly and that companies are ranked as expected; conduct usability testing for clarity."
          },
          {
            "id": 3,
            "title": "Develop Text and Semantic Search Functionality",
            "description": "Enable users to search companies by name, description, and industry using both traditional text search and semantic search powered by OpenAI embeddings.",
            "dependencies": [
              2
            ],
            "details": "Integrate a search bar supporting keyword queries and semantic understanding for improved relevance. Ensure search results update dynamically.",
            "status": "done",
            "testStrategy": "Test search accuracy with a variety of queries; compare semantic and text search results for relevance and performance."
          },
          {
            "id": 4,
            "title": "Build Filtering System for Batch, Team Size, and Hiring Status",
            "description": "Implement interactive filters allowing users to refine company results by batch, team size, and hiring status.",
            "dependencies": [
              3
            ],
            "details": "Design filter UI components and connect them to the data layer to update results in real time. Ensure filters are intuitive and accessible.",
            "status": "done",
            "testStrategy": "Test filter combinations for correct result updates; validate accessibility and ease of use through user feedback."
          },
          {
            "id": 5,
            "title": "Add Pagination and Infinite Scroll for Performance",
            "description": "Integrate pagination and infinite scroll mechanisms to efficiently load and display large sets of company data.",
            "dependencies": [
              4
            ],
            "details": "Choose and implement a loading strategy (pagination or infinite scroll) that maintains performance and user experience for large datasets.",
            "status": "done",
            "testStrategy": "Test loading performance with large datasets; ensure smooth scrolling and correct data loading without duplication or missing entries."
          }
        ]
      },
      {
        "id": 6,
        "title": "Company Profile Pages with Detailed Intelligence",
        "description": "Create comprehensive company profile pages displaying real YC data, scores, and spearfish analysis from backend services",
        "status": "done",
        "dependencies": [
          5
        ],
        "priority": "medium",
        "details": "Build detailed company profile pages with tabbed organization (Overview, Technical, Team, Opportunities). Display real YC data from API service, spearfish score breakdown from scoring algorithm, GitHub repository information, and growth metrics from Supabase. Create 'Why Spearfish This Company' section highlighting specific signals and opportunities. Replace all mock data with actual API calls. Add dynamic content loading and caching for performance. Implement breadcrumb navigation and social sharing.",
        "testStrategy": "Test profile page loading performance with real data, validate data accuracy from backend services, test tab navigation and content organization, verify score explanations match algorithm output, test API integration and error handling",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Tabbed Company Profile Page Layout",
            "description": "Create the structural layout for company profile pages with tabbed navigation for Overview, Technical, Team, and Opportunities sections.",
            "dependencies": [],
            "details": "Develop a responsive UI/UX design that organizes company data into clearly separated tabs, ensuring intuitive navigation and accessibility.",
            "status": "done",
            "testStrategy": "Verify tab switching, layout responsiveness, and accessibility compliance across devices and browsers."
          },
          {
            "id": 2,
            "title": "Integrate YC Data and Growth Metrics",
            "description": "Fetch and display Y Combinator (YC) company data and relevant growth metrics within the Overview and Opportunities tabs.",
            "dependencies": [
              1
            ],
            "details": "Implement backend and frontend logic to retrieve YC data and growth statistics, presenting them in a visually clear and informative manner.",
            "status": "done",
            "testStrategy": "Test data retrieval accuracy, loading times, and correct rendering of all YC and growth metric fields."
          },
          {
            "id": 3,
            "title": "Replace Mock Data with Real API Integration",
            "description": "Remove all mock data from CompanyCard, CompanyProfileClient, and tab components, replacing with actual API calls to backend services.",
            "dependencies": [
              2
            ],
            "details": "Update CompanyCard to fetch data from Supabase companies table. Modify CompanyProfileClient to retrieve real company data via API routes. Update OverviewTab to display actual YC data from the YC API service. Ensure all components handle loading states and API errors gracefully.",
            "status": "done",
            "testStrategy": "Test API calls return correct data, verify error handling for failed requests, validate loading states display properly, ensure data matches what's in Supabase and YC API."
          },
          {
            "id": 4,
            "title": "Implement Spearfish Score Breakdown and Explanations",
            "description": "Display the real spearfish score from the scoring algorithm with a detailed breakdown and contextual explanations in the Technical tab.",
            "dependencies": [
              3
            ],
            "details": "Connect to the spearfish scoring algorithm service to fetch actual scores and breakdowns. Develop components to show score components, calculation logic from the algorithm, and explanatory tooltips or modals for user understanding. Replace mock score data with real algorithm outputs.",
            "status": "done",
            "testStrategy": "Validate score calculations match algorithm output, breakdown accuracy against scoring service, and clarity of explanations through user testing."
          },
          {
            "id": 5,
            "title": "Add GitHub Repository and Team Information",
            "description": "Integrate GitHub repository data and detailed team member profiles into the Technical and Team tabs using real API data.",
            "dependencies": [
              3
            ],
            "details": "Connect to GitHub APIs and Supabase to display real repository stats and activity. Present structured team bios, roles, and relevant links from actual company data. Remove hardcoded team information and replace with dynamic data from backend services.",
            "status": "done",
            "testStrategy": "Check for correct API integration, data freshness from GitHub, completeness of team information from Supabase, and proper error handling for missing data."
          },
          {
            "id": 6,
            "title": "Implement Dynamic Content Loading, Caching, and Navigation Features",
            "description": "Enable dynamic content loading with real data, caching for performance, breadcrumb navigation, social sharing, and the 'Why Spearfish This Company' section using actual insights.",
            "dependencies": [
              4,
              5
            ],
            "details": "Optimize data fetching from all backend services with caching strategies. Add breadcrumb trails for navigation, integrate social sharing buttons with real company data, and create a section highlighting key signals and opportunities based on actual scoring algorithm outputs and company data.",
            "status": "done",
            "testStrategy": "Test dynamic loading speed with real API calls, cache invalidation for updated data, navigation accuracy, social sharing with actual company info, and relevance of the 'Why Spearfish' content based on real scores."
          }
        ]
      },
      {
        "id": 7,
        "title": "GitHub API Integration for Technical Signals",
        "description": "Integrate GitHub API to track repository activity and star growth for enhanced company scoring, replacing mock GitHub data in frontend",
        "status": "in-progress",
        "dependencies": [
          4
        ],
        "priority": "medium",
        "details": "Build GitHub API integration to fetch repository data for AI companies. Track star counts, commit activity, and growth metrics. Implement monthly star growth calculation (>1K/month criteria). Create background jobs for daily GitHub data updates with proper rate limiting (5000 requests/hour). Store historical data for trend analysis in Supabase. Handle API errors and missing repositories gracefully. Update frontend components to use real GitHub data instead of mock values.",
        "testStrategy": "Test GitHub API integration and rate limiting, validate star growth calculations, test background job execution, verify error handling for private/missing repositories, ensure frontend displays real GitHub metrics",
        "subtasks": [
          {
            "id": 1,
            "title": "Set Up GitHub API Client and Authentication",
            "description": "Create GitHub API client with proper authentication and rate limiting handling.",
            "dependencies": [],
            "details": "Implement GitHub API client using Octokit or similar library. Set up authentication with GitHub API tokens. Implement rate limiting logic to stay within 5000 requests/hour limit. Create error handling for API failures.",
            "status": "done",
            "testStrategy": "Test API authentication, verify rate limiting works correctly, test error handling scenarios."
          },
          {
            "id": 2,
            "title": "Create Data Models and Database Schema for GitHub Data",
            "description": "Design and implement Supabase tables for storing GitHub repository data and historical metrics.",
            "dependencies": [
              1
            ],
            "details": "Create tables for repository information, star history, commit activity, and growth metrics. Design schema to support efficient queries and trend analysis. Set up indexes for performance.",
            "status": "done",
            "testStrategy": "Verify database schema creation, test data insertion and retrieval, validate query performance."
          },
          {
            "id": 3,
            "title": "Implement Repository Data Fetching and Storage",
            "description": "Build service to fetch repository data from GitHub API and store in Supabase.",
            "dependencies": [
              2
            ],
            "details": "Create functions to fetch repository stats, star counts, and commit activity. Implement data transformation and storage logic. Handle missing or private repositories gracefully.",
            "status": "done",
            "testStrategy": "Test data fetching accuracy, verify proper storage in database, test error handling for edge cases."
          },
          {
            "id": 4,
            "title": "Build Background Jobs for Daily Updates",
            "description": "Create scheduled jobs to update GitHub data daily with proper queuing and error recovery.",
            "dependencies": [
              3
            ],
            "details": "Implement background job system using Supabase Edge Functions or similar. Schedule daily updates for all tracked repositories. Add retry logic and error notifications. Implement job queuing to respect rate limits.",
            "status": "done",
            "testStrategy": "Test job scheduling and execution, verify rate limit compliance, test error recovery and retry logic."
          },
          {
            "id": 5,
            "title": "Replace Mock GitHub Data in Frontend Components",
            "description": "Update all frontend components to fetch and display real GitHub data from the API service.",
            "dependencies": [
              3
            ],
            "details": "Modify CompanyCard to show real star counts and growth. Update Technical tab to display actual repository metrics. Remove all hardcoded GitHub data. Implement loading states and error handling in UI.",
            "status": "in-progress",
            "testStrategy": "Verify frontend displays correct GitHub data, test loading and error states, validate data freshness indicators."
          }
        ]
      },
      {
        "id": 8,
        "title": "Basic Artifact Suggestion System",
        "description": "Create initial artifact suggestion engine with templates and static recommendations, integrated with real company data",
        "status": "pending",
        "dependencies": [
          6
        ],
        "priority": "medium",
        "details": "Build artifact suggestion system with predefined templates for different company types and user skill levels. Create artifact categories (code contributions, business analyses, technical demos). Implement basic matching algorithm between user skills and real company needs from Supabase data. Store artifact templates with implementation guides and success metrics. Add artifact tracking and completion status for users. Replace any mock artifact suggestions with data-driven recommendations based on actual company profiles.",
        "testStrategy": "Test artifact suggestion accuracy using real company data, validate template completeness and clarity, test artifact tracking with actual user profiles, verify suggestions match real company needs",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Artifact Template System and Categories",
            "description": "Create the structure for artifact templates and define artifact categories.",
            "dependencies": [],
            "details": "Design template schema for different artifact types. Define categories like code contributions, business analyses, and technical demos. Create template storage structure in Supabase.",
            "status": "pending",
            "testStrategy": "Verify template structure completeness, test category organization, validate database schema."
          },
          {
            "id": 2,
            "title": "Build Matching Algorithm Using Real Company Data",
            "description": "Implement algorithm to match user skills with actual company needs from database.",
            "dependencies": [
              1
            ],
            "details": "Create matching logic that uses real company data from Supabase including tech stack, growth stage, and needs. Consider user skills and preferences. Generate relevance scores for artifact suggestions.",
            "status": "pending",
            "testStrategy": "Test matching accuracy with various user profiles, verify algorithm uses real company data, validate relevance scoring."
          },
          {
            "id": 3,
            "title": "Implement Artifact Tracking and User Progress System",
            "description": "Build system to track artifact creation and completion status for users.",
            "dependencies": [
              2
            ],
            "details": "Create database tables for artifact tracking. Implement progress tracking logic. Build APIs for artifact status updates. Connect to user profiles and company campaigns.",
            "status": "pending",
            "testStrategy": "Test artifact creation and tracking, verify progress calculations, validate data persistence."
          },
          {
            "id": 4,
            "title": "Replace Mock Suggestions with Data-Driven Recommendations",
            "description": "Update frontend to display artifact suggestions based on real company data and user profiles.",
            "dependencies": [
              3
            ],
            "details": "Remove any hardcoded artifact suggestions. Implement API calls to fetch personalized suggestions. Display suggestions with real company context and requirements. Add loading and error states.",
            "status": "pending",
            "testStrategy": "Verify suggestions are based on actual data, test personalization accuracy, validate UI updates correctly."
          }
        ]
      },
      {
        "id": 9,
        "title": "Email Template Generation System",
        "description": "Implement email template system for cold outreach with personalization using real company and user data",
        "status": "pending",
        "dependencies": [
          8
        ],
        "priority": "medium",
        "details": "Create email template system with fill-in-the-blank style personalization using actual company data from Supabase and YC API. Build templates for different outreach scenarios (artifact presentation, expertise demonstration, value proposition). Implement template customization with real company-specific data insertion including actual metrics, team info, and spearfish scores. Add email preview functionality with live data and basic formatting options. Store user email campaigns and track template usage patterns. Replace any mock email content with dynamically generated content based on real data.",
        "testStrategy": "Test email template generation with real company data from database, validate personalization accuracy using actual metrics, test email preview with live data, verify template variety and data integration",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Email Template System Architecture",
            "description": "Create the structure for email templates with dynamic data placeholders.",
            "dependencies": [],
            "details": "Design template schema supporting variable insertion. Create placeholder system for company data, user info, and artifact details. Set up template storage and versioning.",
            "status": "pending",
            "testStrategy": "Verify template structure supports all data types, test placeholder system, validate storage design."
          },
          {
            "id": 2,
            "title": "Build Template Personalization Engine with Real Data",
            "description": "Implement system to populate templates with actual company and user data.",
            "dependencies": [
              1
            ],
            "details": "Create data fetching logic for company info from Supabase and YC API. Build template rendering engine that inserts real metrics, scores, and team data. Handle missing data gracefully.",
            "status": "pending",
            "testStrategy": "Test data insertion accuracy, verify all placeholders populate correctly, test error handling for missing data."
          },
          {
            "id": 3,
            "title": "Implement Email Preview and Campaign Tracking",
            "description": "Build preview functionality and campaign management system.",
            "dependencies": [
              2
            ],
            "details": "Create email preview component showing rendered templates with real data. Build campaign tracking tables in Supabase. Implement usage analytics and success tracking.",
            "status": "pending",
            "testStrategy": "Test preview accuracy with various templates, verify campaign tracking works, validate analytics data."
          },
          {
            "id": 4,
            "title": "Replace Mock Email Content with Dynamic Generation",
            "description": "Update all email-related UI to use real data-driven content generation.",
            "dependencies": [
              3
            ],
            "details": "Remove any hardcoded email examples. Connect template system to real company profiles. Display personalized email previews using actual spearfish scores and company metrics. Add real-time template editing.",
            "status": "pending",
            "testStrategy": "Verify emails use real company data, test personalization with different companies, validate editing functionality."
          }
        ]
      },
      {
        "id": 10,
        "title": "User Dashboard and Progress Tracking",
        "description": "Build user dashboard for managing spearfish campaigns, artifacts, and tracking progress with real data integration",
        "status": "pending",
        "dependencies": [
          9
        ],
        "priority": "low",
        "details": "Create user dashboard showing active spearfish campaigns with real company data, completed artifacts linked to actual companies, and email outreach status from the database. Implement progress tracking with visual indicators based on real metrics and success data. Add user profile management with skills, interests, and preferences stored in Supabase. Build campaign history and analytics views using actual performance data. Implement data export functionality for user portfolios and campaign results. Replace all mock dashboard data with live queries to backend services.",
        "testStrategy": "Test dashboard functionality with real user data, validate progress tracking calculations against actual metrics, test profile management with Supabase integration, verify analytics use real campaign data",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Dashboard Layout and Data Architecture",
            "description": "Create dashboard UI structure and plan data fetching strategy.",
            "dependencies": [],
            "details": "Design responsive dashboard layout with sections for campaigns, artifacts, and analytics. Plan efficient data fetching from Supabase. Create loading state designs.",
            "status": "pending",
            "testStrategy": "Verify layout responsiveness, test data architecture efficiency, validate UX flow."
          },
          {
            "id": 2,
            "title": "Implement Campaign and Artifact Tracking with Real Data",
            "description": "Build campaign management system connected to actual company and artifact data.",
            "dependencies": [
              1
            ],
            "details": "Create APIs to fetch user campaigns with real company associations. Display artifact progress linked to actual companies. Show email outreach status from database. Implement real-time updates.",
            "status": "pending",
            "testStrategy": "Test campaign data accuracy, verify artifact tracking with real companies, validate real-time updates."
          },
          {
            "id": 3,
            "title": "Build Analytics and Progress Visualization",
            "description": "Create analytics views using real performance metrics and campaign data.",
            "dependencies": [
              2
            ],
            "details": "Implement charts and visualizations for campaign performance. Calculate success metrics from actual user actions. Create progress indicators based on real completion data. Add filtering and date range selection.",
            "status": "pending",
            "testStrategy": "Verify analytics calculations accuracy, test visualization with various data sets, validate filtering functionality."
          },
          {
            "id": 4,
            "title": "Replace Mock Dashboard Data with Live Backend Queries",
            "description": "Update entire dashboard to fetch and display real user and campaign data.",
            "dependencies": [
              3
            ],
            "details": "Remove all mock data from dashboard components. Implement API calls to fetch real user campaigns, artifacts, and metrics. Add proper loading states and error handling. Ensure data refreshes appropriately.",
            "status": "pending",
            "testStrategy": "Verify all data comes from backend services, test loading and error states, validate data freshness and accuracy."
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-11T03:44:57.583Z",
      "updated": "2025-07-15T00:52:17.093Z",
      "description": "Tasks for master context"
    }
  }
}
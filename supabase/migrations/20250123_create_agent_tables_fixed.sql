-- Migration to create tables for the agent architecture
-- Project Artifacts and Email Templates for the agent system

-- Step 1: Create project_artifacts table for Project Idea Generator Tool
CREATE TABLE IF NOT EXISTS project_artifacts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    company_id UUID NOT NULL REFERENCES companies(id) ON DELETE CASCADE,
    research_session_id UUID NOT NULL REFERENCES company_research_sessions(id) ON DELETE CASCADE,
    created_by UUID NOT NULL REFERENCES user_profiles(id) ON DELETE RESTRICT,
    
    -- Artifact type and classification
    type TEXT NOT NULL CHECK (type IN (
        'technical_proposal',
        'integration_guide', 
        'optimization_plan',
        'security_audit',
        'market_analysis',
        'automation_script',
        'dashboard_design',
        'api_documentation'
    )),
    
    -- Core content
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    problem_statement TEXT NOT NULL,
    proposed_solution TEXT NOT NULL,
    implementation_approach TEXT NOT NULL,
    
    -- Effort and impact estimates
    estimated_effort TEXT NOT NULL CHECK (estimated_effort IN ('low', 'medium', 'high')),
    estimated_impact TEXT NOT NULL CHECK (estimated_impact IN ('low', 'medium', 'high')),
    
    -- Project details
    required_skills JSONB DEFAULT '[]'::jsonb,
    deliverables JSONB DEFAULT '[]'::jsonb,
    timeline_estimate TEXT,
    success_metrics JSONB DEFAULT '[]'::jsonb,
    risk_factors JSONB DEFAULT '[]'::jsonb,
    
    -- Links to research
    source_findings JSONB DEFAULT '[]'::jsonb, -- Array of research finding IDs
    
    -- Scoring and confidence
    priority_score INTEGER NOT NULL DEFAULT 50 CHECK (priority_score >= 0 AND priority_score <= 100),
    confidence_score DECIMAL(3,2) NOT NULL DEFAULT 0.5 CHECK (confidence_score >= 0 AND confidence_score <= 1),
    
    -- Metadata and timestamps
    metadata JSONB DEFAULT '{}'::jsonb,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Step 2: Create indexes for project_artifacts performance
CREATE INDEX IF NOT EXISTS idx_project_artifacts_company_id ON project_artifacts(company_id);
CREATE INDEX IF NOT EXISTS idx_project_artifacts_research_session_id ON project_artifacts(research_session_id);
CREATE INDEX IF NOT EXISTS idx_project_artifacts_created_by ON project_artifacts(created_by);
CREATE INDEX IF NOT EXISTS idx_project_artifacts_type ON project_artifacts(type);
CREATE INDEX IF NOT EXISTS idx_project_artifacts_priority_score ON project_artifacts(priority_score DESC);
CREATE INDEX IF NOT EXISTS idx_project_artifacts_created_at ON project_artifacts(created_at DESC);

-- Step 3: Enable Row Level Security for project_artifacts
ALTER TABLE project_artifacts ENABLE ROW LEVEL SECURITY;

-- Step 4: Create RLS policies for project_artifacts
CREATE POLICY "project_artifacts_no_anon_access" ON project_artifacts
  AS RESTRICTIVE
  FOR ALL
  TO anon
  USING (false)
  WITH CHECK (false);

CREATE POLICY "project_artifacts_select_company" ON project_artifacts
  FOR SELECT
  TO authenticated
  USING (company_id = public.get_user_company_id());

CREATE POLICY "project_artifacts_insert_own_company" ON project_artifacts
  FOR INSERT
  TO authenticated
  WITH CHECK (
    company_id = public.get_user_company_id()
    AND created_by = public.get_current_user_id()
  );

CREATE POLICY "project_artifacts_update_own" ON project_artifacts
  FOR UPDATE
  TO authenticated
  USING (created_by = public.get_current_user_id())
  WITH CHECK (created_by = public.get_current_user_id());

CREATE POLICY "project_artifacts_delete_own" ON project_artifacts
  FOR DELETE
  TO authenticated
  USING (created_by = public.get_current_user_id());

CREATE POLICY "project_artifacts_service_role_all" ON project_artifacts
  FOR ALL
  TO service_role
  USING (true)
  WITH CHECK (true);

-- Step 5: Add updated_at trigger for project_artifacts
CREATE TRIGGER update_project_artifacts_updated_at 
    BEFORE UPDATE ON project_artifacts
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Step 6: Add helpful comments
COMMENT ON TABLE project_artifacts IS 'AI-generated project artifacts from the Project Idea Generator Tool';
COMMENT ON COLUMN project_artifacts.type IS 'Type of project artifact generated by the agent';
COMMENT ON COLUMN project_artifacts.research_session_id IS 'Links to the research session that provided the data for this artifact';
COMMENT ON COLUMN project_artifacts.source_findings IS 'Array of research finding IDs that contributed to this project idea';
COMMENT ON COLUMN project_artifacts.priority_score IS 'AI-calculated priority score from 0-100 based on impact, effort, and feasibility';
COMMENT ON COLUMN project_artifacts.confidence_score IS 'AI confidence in the project assessment from 0.0-1.0';

-- Step 7: Verification
DO $$
BEGIN
  -- Check if project_artifacts table exists
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'project_artifacts') THEN
    RAISE NOTICE 'SUCCESS: project_artifacts table created successfully';
  ELSE
    RAISE NOTICE 'ERROR: project_artifacts table was not created';
  END IF;
  
  RAISE NOTICE 'Project artifacts table migration completed successfully!';
END $$;
-- Fixed migration for extending artifacts table to support agent-generated content
-- This migration safely handles existing tables and adds missing components

-- Step 1: Safely extend artifacts table type constraint
DO $$
BEGIN
    -- Drop existing type constraint if it exists
    ALTER TABLE artifacts DROP CONSTRAINT IF EXISTS artifacts_type_check;
    
    -- Add new constraint with agent types
    ALTER TABLE artifacts 
    ADD CONSTRAINT artifacts_type_check 
    CHECK (type IN (
        'pitch_deck', 
        'product_roadmap', 
        'technical_doc', 
        'marketing_copy', 
        'project_idea',      -- Generated by Project Idea Generator Tool
        'email_template',    -- Generated by Email Template Creator Tool
        'other'
    ));
    
    RAISE NOTICE 'Successfully updated artifacts type constraint';
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Error updating artifacts constraint: %', SQLERRM;
END $$;

-- Step 2: Drop email_campaigns table if it exists (to recreate properly)
DROP TABLE IF EXISTS email_campaigns CASCADE;

-- Step 3: Create email_campaigns table with all columns
CREATE TABLE email_campaigns (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    company_id UUID NOT NULL REFERENCES companies(id) ON DELETE CASCADE,
    created_by UUID NOT NULL REFERENCES user_profiles(id) ON DELETE RESTRICT,
    project_artifact_id UUID REFERENCES artifacts(id) ON DELETE SET NULL,
    email_artifact_id UUID REFERENCES artifacts(id) ON DELETE SET NULL,
    recipient_email TEXT,
    recipient_name TEXT,
    status TEXT NOT NULL DEFAULT 'draft' CHECK (status IN ('draft', 'sent', 'delivered', 'opened', 'replied', 'bounced')),
    sent_at TIMESTAMP WITH TIME ZONE,
    opened_at TIMESTAMP WITH TIME ZONE,
    replied_at TIMESTAMP WITH TIME ZONE,
    campaign_metadata JSONB DEFAULT '{}'::jsonb,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Step 4: Create indexes for email_campaigns (only after table exists)
CREATE INDEX idx_email_campaigns_company_id ON email_campaigns(company_id);
CREATE INDEX idx_email_campaigns_created_by ON email_campaigns(created_by);
CREATE INDEX idx_email_campaigns_project_artifact_id ON email_campaigns(project_artifact_id);
CREATE INDEX idx_email_campaigns_email_artifact_id ON email_campaigns(email_artifact_id);
CREATE INDEX idx_email_campaigns_status ON email_campaigns(status);
CREATE INDEX idx_email_campaigns_sent_at ON email_campaigns(sent_at);

-- Step 5: Add updated_at trigger for email_campaigns
CREATE TRIGGER update_email_campaigns_updated_at 
    BEFORE UPDATE ON email_campaigns
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Step 6: Enable RLS on email_campaigns
ALTER TABLE email_campaigns ENABLE ROW LEVEL SECURITY;

-- Step 7: Create RLS policies for email_campaigns
CREATE POLICY "email_campaigns_no_anon_access" ON email_campaigns
  AS RESTRICTIVE
  FOR ALL
  TO anon
  USING (false)
  WITH CHECK (false);

CREATE POLICY "email_campaigns_select_company" ON email_campaigns
  FOR SELECT
  TO authenticated
  USING (company_id = public.get_user_company_id());

CREATE POLICY "email_campaigns_insert_own_company" ON email_campaigns
  FOR INSERT
  TO authenticated
  WITH CHECK (
    company_id = public.get_user_company_id()
    AND created_by = public.get_current_user_id()
  );

CREATE POLICY "email_campaigns_update_own" ON email_campaigns
  FOR UPDATE
  TO authenticated
  USING (created_by = public.get_current_user_id())
  WITH CHECK (created_by = public.get_current_user_id());

CREATE POLICY "email_campaigns_delete_own" ON email_campaigns
  FOR DELETE
  TO authenticated
  USING (created_by = public.get_current_user_id());

CREATE POLICY "email_campaigns_service_role_all" ON email_campaigns
  FOR ALL
  TO service_role
  USING (true)
  WITH CHECK (true);

-- Step 8: Add helpful comments
COMMENT ON TABLE email_campaigns IS 'Email campaigns linking project artifacts to outreach emails';
COMMENT ON COLUMN email_campaigns.project_artifact_id IS 'Reference to the project idea artifact that was completed';
COMMENT ON COLUMN email_campaigns.email_artifact_id IS 'Reference to the generated email template artifact';
COMMENT ON COLUMN email_campaigns.status IS 'Campaign status: draft, sent, delivered, opened, replied, bounced';
COMMENT ON COLUMN email_campaigns.campaign_metadata IS 'Additional metadata about the email campaign';

-- Update artifact type comments
COMMENT ON COLUMN artifacts.type IS 'Type of document: pitch_deck, product_roadmap, technical_doc, marketing_copy, project_idea, email_template, other';

-- Step 9: Verify everything worked
DO $$
BEGIN
  -- Check if email_campaigns table exists and has the right columns
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'email_campaigns') THEN
    RAISE NOTICE 'SUCCESS: email_campaigns table created successfully';
    
    -- Check if project_artifact_id column exists
    IF EXISTS (SELECT 1 FROM information_schema.columns 
               WHERE table_name = 'email_campaigns' 
               AND column_name = 'project_artifact_id') THEN
      RAISE NOTICE 'SUCCESS: project_artifact_id column exists';
    ELSE
      RAISE NOTICE 'ERROR: project_artifact_id column missing';
    END IF;
    
  ELSE
    RAISE NOTICE 'ERROR: email_campaigns table was not created';
  END IF;
  
  -- Check artifacts constraint
  IF EXISTS (SELECT 1 FROM information_schema.check_constraints 
             WHERE constraint_name = 'artifacts_type_check') THEN
    RAISE NOTICE 'SUCCESS: artifacts type constraint updated';
  ELSE
    RAISE NOTICE 'ERROR: artifacts type constraint missing';
  END IF;
  
  RAISE NOTICE 'Migration completed - ready for agent development!';
END $$;
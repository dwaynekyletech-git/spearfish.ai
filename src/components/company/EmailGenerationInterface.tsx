/**
 * Email Generation Interface Component
 * 
 * Interface for generating, previewing, and customizing email templates based on selected projects
 */

'use client';

import { useState } from 'react';
import { 
  EnvelopeIcon,
  CogIcon,
  DocumentDuplicateIcon,
  PencilIcon,
  EyeIcon,
  ArrowDownTrayIcon,
  SparklesIcon,
  UserIcon,
  BuildingOfficeIcon,
  ChartBarIcon
} from '@heroicons/react/24/outline';
import { EmailTemplate, EmailGenerationConfig } from '@/lib/agent-email-generator';

interface ProjectArtifact {
  id: string;
  type: string;
  title: string;
  description: string;
  problem_statement: string;
  proposed_solution: string;
  implementation_approach: string;
  estimated_effort: 'low' | 'medium' | 'high';
  estimated_impact: 'low' | 'medium' | 'high';
  required_skills: string[];
  deliverables: string[];
  timeline_estimate: string;
  success_metrics: string[];
  risk_factors: string[];
  priority_score: number;
  confidence_score: number;
}

interface EmailGenerationInterfaceProps {
  selectedProject: ProjectArtifact | null;
  companyData: {
    id: string;
    name: string;
    industry?: string;
    website?: string;
    description?: string;
  };
  onEmailGenerated?: (template: EmailTemplate) => void;
  className?: string;
}

export function EmailGenerationInterface({
  selectedProject,
  companyData,
  onEmailGenerated,
  className = ""
}: EmailGenerationInterfaceProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedTemplate, setGeneratedTemplate] = useState<EmailTemplate | null>(null);
  const [showPreview, setShowPreview] = useState(false);
  const [editMode, setEditMode] = useState(false);
  const [editedTemplate, setEditedTemplate] = useState<{
    subject_line: string;
    email_body: string;
    call_to_action: string;
  } | null>(null);
  const [config, setConfig] = useState<EmailGenerationConfig>({
    tone: 'professional',
    length: 'medium',
    includeCredentials: false,
    includePortfolio: false,
    focusOnValue: true,
    createVariants: false,
    targetPersona: 'technical_lead',
    urgencyLevel: 'medium'
  });
  const [error, setError] = useState<string | null>(null);

  const generateEmail = async () => {
    if (!selectedProject) {
      setError('Please select a project first');
      return;
    }

    setIsGenerating(true);
    setError(null);

    try {
      const response = await fetch(`/api/companies/${companyData.id}/emails/generate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          project_id: selectedProject.id,
          config: config
        }),
      });

      if (response.ok) {
        const data = await response.json();
        setGeneratedTemplate(data.template);
        setEditedTemplate({
          subject_line: data.template.subject_line,
          email_body: data.template.email_body,
          call_to_action: data.template.call_to_action
        });
        setShowPreview(true);
        onEmailGenerated?.(data.template);
      } else {
        const errorData = await response.json().catch(() => null);
        setError(errorData?.error || 'Failed to generate email template');
      }
    } catch (err) {
      console.error('Email generation error:', err);
      setError('Network error occurred while generating email');
    } finally {
      setIsGenerating(false);
    }
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      // Could add a toast notification here
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
    }
  };

  const toggleEditMode = () => {
    if (editMode && editedTemplate && generatedTemplate) {
      // Save edits back to the template
      const updatedTemplate = {
        ...generatedTemplate,
        subject_line: editedTemplate.subject_line,
        email_body: editedTemplate.email_body,
        call_to_action: editedTemplate.call_to_action
      };
      setGeneratedTemplate(updatedTemplate);
    }
    setEditMode(!editMode);
  };

  const resetEdits = () => {
    if (generatedTemplate) {
      setEditedTemplate({
        subject_line: generatedTemplate.subject_line,
        email_body: generatedTemplate.email_body,
        call_to_action: generatedTemplate.call_to_action
      });
    }
  };

  const exportEmail = () => {
    if (!generatedTemplate) return;

    const template = editedTemplate || generatedTemplate;
    const emailContent = `Subject: ${template.subject_line}

${template.email_body}

${template.call_to_action}

---
Generated by Spearfish AI
Response Rate Estimate: ${Math.round(generatedTemplate.estimated_response_rate * 100)}%
Tone: ${generatedTemplate.tone}
Target: ${config.targetPersona}`;

    const blob = new Blob([emailContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${companyData.name}_email_template_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (!selectedProject) {
    return (
      <div className={`bg-slate-800/50 backdrop-blur-xl border border-slate-700/50 rounded-xl p-8 text-center ${className}`}>
        <div className="text-4xl mb-4">📧</div>
        <h3 className="text-xl font-semibold text-white mb-2">Email Template Generator</h3>
        <p className="text-slate-400">
          Select a completed project from the list above to generate a personalized email template.
        </p>
      </div>
    );
  }

  return (
    <div className={`bg-slate-800/50 backdrop-blur-xl border border-slate-700/50 rounded-xl p-6 ${className}`}>
      {/* Header */}
      <div className="flex items-center gap-3 mb-6">
        <EnvelopeIcon className="h-6 w-6 text-blue-400" />
        <h3 className="text-xl font-semibold text-white">Email Template Generator</h3>
      </div>

      {/* Selected Project Summary */}
      <div className="bg-slate-700/30 rounded-lg p-4 mb-6">
        <div className="flex items-center gap-2 mb-2">
          <SparklesIcon className="h-4 w-4 text-purple-400" />
          <span className="text-sm font-medium text-purple-300">Selected Project</span>
        </div>
        <h4 className="text-white font-medium mb-1">{selectedProject.title}</h4>
        <p className="text-slate-300 text-sm">{selectedProject.description}</p>
        <div className="flex items-center gap-4 mt-3 text-xs">
          <span className="text-slate-400">Impact: <span className="text-white">{selectedProject.estimated_impact}</span></span>
          <span className="text-slate-400">Timeline: <span className="text-white">{selectedProject.timeline_estimate}</span></span>
        </div>
      </div>

      {/* Configuration Panel */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
        {/* Tone Selection */}
        <div>
          <label className="block text-sm font-medium text-slate-300 mb-2">
            <UserIcon className="h-4 w-4 inline mr-1" />
            Tone
          </label>
          <select
            value={config.tone}
            onChange={(e) => setConfig(prev => ({ ...prev, tone: e.target.value as any }))}
            className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-3 py-2 text-white focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
          >
            <option value="professional">Professional</option>
            <option value="casual">Casual</option>
            <option value="technical">Technical</option>
            <option value="executive">Executive</option>
          </select>
        </div>

        {/* Target Persona */}
        <div>
          <label className="block text-sm font-medium text-slate-300 mb-2">
            <BuildingOfficeIcon className="h-4 w-4 inline mr-1" />
            Target Persona
          </label>
          <select
            value={config.targetPersona}
            onChange={(e) => setConfig(prev => ({ ...prev, targetPersona: e.target.value as any }))}
            className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-3 py-2 text-white focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
          >
            <option value="technical_lead">Technical Lead</option>
            <option value="cto">CTO</option>
            <option value="vp_engineering">VP Engineering</option>
            <option value="founder">Founder</option>
            <option value="product_manager">Product Manager</option>
          </select>
        </div>

        {/* Email Length */}
        <div>
          <label className="block text-sm font-medium text-slate-300 mb-2">
            <ChartBarIcon className="h-4 w-4 inline mr-1" />
            Length
          </label>
          <select
            value={config.length}
            onChange={(e) => setConfig(prev => ({ ...prev, length: e.target.value as any }))}
            className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-3 py-2 text-white focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
          >
            <option value="short">Short (&lt;150 words)</option>
            <option value="medium">Medium (150-250 words)</option>
            <option value="long">Long (250-400 words)</option>
          </select>
        </div>
      </div>

      {/* Additional Options */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        <label className="flex items-center gap-2">
          <input
            type="checkbox"
            checked={config.includeCredentials || false}
            onChange={(e) => setConfig(prev => ({ ...prev, includeCredentials: e.target.checked }))}
            className="rounded bg-slate-700 border-slate-600 text-blue-500 focus:ring-blue-500"
          />
          <span className="text-sm text-slate-300">Include Credentials</span>
        </label>

        <label className="flex items-center gap-2">
          <input
            type="checkbox"
            checked={config.includePortfolio || false}
            onChange={(e) => setConfig(prev => ({ ...prev, includePortfolio: e.target.checked }))}
            className="rounded bg-slate-700 border-slate-600 text-blue-500 focus:ring-blue-500"
          />
          <span className="text-sm text-slate-300">Include Portfolio</span>
        </label>

        <label className="flex items-center gap-2">
          <input
            type="checkbox"
            checked={config.focusOnValue || false}
            onChange={(e) => setConfig(prev => ({ ...prev, focusOnValue: e.target.checked }))}
            className="rounded bg-slate-700 border-slate-600 text-blue-500 focus:ring-blue-500"
          />
          <span className="text-sm text-slate-300">Focus on Value</span>
        </label>

        <label className="flex items-center gap-2">
          <input
            type="checkbox"
            checked={config.createVariants || false}
            onChange={(e) => setConfig(prev => ({ ...prev, createVariants: e.target.checked }))}
            className="rounded bg-slate-700 border-slate-600 text-blue-500 focus:ring-blue-500"
          />
          <span className="text-sm text-slate-300">Create A/B Variants</span>
        </label>
      </div>

      {/* Generate Button */}
      <div className="flex justify-center mb-6">
        <button
          onClick={generateEmail}
          disabled={isGenerating}
          className="px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed text-white font-medium rounded-lg transition-all flex items-center gap-2"
        >
          {isGenerating ? (
            <>
              <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
              Generating Email...
            </>
          ) : (
            <>
              <SparklesIcon className="h-4 w-4" />
              Generate Email Template
            </>
          )}
        </button>
      </div>

      {/* Error Display */}
      {error && (
        <div className="mb-6 p-3 bg-red-600/10 border border-red-500/20 rounded-lg">
          <div className="flex items-start gap-2">
            <span className="text-red-400 text-sm">⚠️</span>
            <div className="text-sm">
              <p className="text-red-300 font-medium">Generation Failed</p>
              <p className="text-red-400 mt-1">{error}</p>
            </div>
          </div>
        </div>
      )}

      {/* Email Preview */}
      {generatedTemplate && showPreview && (
        <div className="space-y-6">
          {/* Preview Header */}
          <div className="flex items-center justify-between">
            <h4 className="text-lg font-semibold text-white flex items-center gap-2">
              <EyeIcon className="h-5 w-5 text-green-400" />
              Email Preview
            </h4>
            <div className="flex gap-2">
              <button
                onClick={toggleEditMode}
                className={`px-3 py-2 rounded-lg text-sm flex items-center gap-2 transition-colors ${
                  editMode 
                    ? 'bg-green-600/20 hover:bg-green-600/30 text-green-300 border border-green-500/30'
                    : 'bg-slate-700/50 hover:bg-slate-700 text-slate-300'
                }`}
              >
                <PencilIcon className="h-4 w-4" />
                {editMode ? 'Save Changes' : 'Edit'}
              </button>
              {editMode && (
                <button
                  onClick={resetEdits}
                  className="px-3 py-2 bg-slate-700/50 hover:bg-slate-700 text-slate-300 rounded-lg text-sm flex items-center gap-2 transition-colors"
                >
                  Reset
                </button>
              )}
              <button
                onClick={() => {
                  const template = editedTemplate || generatedTemplate;
                  copyToClipboard(`${template.subject_line}\n\n${template.email_body}\n\n${template.call_to_action}`);
                }}
                className="px-3 py-2 bg-slate-700/50 hover:bg-slate-700 text-slate-300 rounded-lg text-sm flex items-center gap-2 transition-colors"
              >
                <DocumentDuplicateIcon className="h-4 w-4" />
                Copy All
              </button>
              <button
                onClick={exportEmail}
                className="px-3 py-2 bg-slate-700/50 hover:bg-slate-700 text-slate-300 rounded-lg text-sm flex items-center gap-2 transition-colors"
              >
                <ArrowDownTrayIcon className="h-4 w-4" />
                Export
              </button>
            </div>
          </div>

          {/* Email Content Preview */}
          <div className="bg-white rounded-lg p-6 text-gray-900">
            {/* Subject Line */}
            <div className="border-b border-gray-200 pb-4 mb-4">
              <div className="flex items-center justify-between">
                <label className="text-sm font-medium text-gray-600">Subject:</label>
                <button
                  onClick={() => copyToClipboard(editedTemplate?.subject_line || generatedTemplate.subject_line)}
                  className="text-blue-500 hover:text-blue-600 text-sm"
                >
                  Copy
                </button>
              </div>
              {editMode ? (
                <input
                  type="text"
                  value={editedTemplate?.subject_line || ''}
                  onChange={(e) => setEditedTemplate(prev => prev ? {...prev, subject_line: e.target.value} : null)}
                  className="mt-1 w-full p-2 border border-gray-300 rounded font-medium focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                />
              ) : (
                <div className="mt-1 p-2 bg-gray-50 rounded font-medium">
                  {editedTemplate?.subject_line || generatedTemplate.subject_line}
                </div>
              )}
            </div>

            {/* Email Body */}
            <div className="mb-4">
              <div className="flex items-center justify-between mb-2">
                <label className="text-sm font-medium text-gray-600">Email Body:</label>
                <button
                  onClick={() => copyToClipboard(editedTemplate?.email_body || generatedTemplate.email_body)}
                  className="text-blue-500 hover:text-blue-600 text-sm"
                >
                  Copy
                </button>
              </div>
              {editMode ? (
                <textarea
                  value={editedTemplate?.email_body || ''}
                  onChange={(e) => setEditedTemplate(prev => prev ? {...prev, email_body: e.target.value} : null)}
                  rows={8}
                  className="w-full p-3 border border-gray-300 rounded leading-relaxed focus:border-blue-500 focus:ring-1 focus:ring-blue-500 resize-y"
                />
              ) : (
                <div className="whitespace-pre-wrap leading-relaxed">
                  {editedTemplate?.email_body || generatedTemplate.email_body}
                </div>
              )}
            </div>

            {/* Call to Action */}
            <div className="pt-4 border-t border-gray-200">
              <div className="flex items-center justify-between mb-2">
                <label className="text-sm font-medium text-gray-600">Call to Action:</label>
                <button
                  onClick={() => copyToClipboard(editedTemplate?.call_to_action || generatedTemplate.call_to_action)}
                  className="text-blue-500 hover:text-blue-600 text-sm"
                >
                  Copy
                </button>
              </div>
              {editMode ? (
                <input
                  type="text"
                  value={editedTemplate?.call_to_action || ''}
                  onChange={(e) => setEditedTemplate(prev => prev ? {...prev, call_to_action: e.target.value} : null)}
                  className="w-full p-2 border border-gray-300 rounded font-medium text-blue-600 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                />
              ) : (
                <div className="font-medium text-blue-600">
                  {editedTemplate?.call_to_action || generatedTemplate.call_to_action}
                </div>
              )}
            </div>
          </div>

          {/* Email Stats */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="bg-slate-700/30 rounded-lg p-4">
              <div className="text-sm text-slate-400">Response Rate Estimate</div>
              <div className="text-xl font-semibold text-green-400">
                {Math.round(generatedTemplate.estimated_response_rate * 100)}%
              </div>
            </div>
            <div className="bg-slate-700/30 rounded-lg p-4">
              <div className="text-sm text-slate-400">Word Count</div>
              <div className="text-xl font-semibold text-blue-400">
                {generatedTemplate.email_body.split(' ').length} words
              </div>
            </div>
            <div className="bg-slate-700/30 rounded-lg p-4">
              <div className="text-sm text-slate-400">Personalization Elements</div>
              <div className="text-xl font-semibold text-purple-400">
                {generatedTemplate.personalization_elements.length}
              </div>
            </div>
          </div>

          {/* A/B Variants (if created) */}
          {generatedTemplate.A_B_variants && generatedTemplate.A_B_variants.length > 0 && (
            <div className="space-y-4">
              <h4 className="text-lg font-semibold text-white">A/B Test Variants</h4>
              {generatedTemplate.A_B_variants.map((variant, index) => (
                <div key={index} className="bg-slate-700/30 rounded-lg p-4">
                  <h5 className="font-medium text-white mb-2">{variant.variant_name}</h5>
                  <div className="space-y-2 text-sm">
                    <div>
                      <span className="text-slate-400">Subject:</span>
                      <span className="text-white ml-2">{variant.subject_line}</span>
                    </div>
                    <div>
                      <span className="text-slate-400">Key Differences:</span>
                      <ul className="list-disc list-inside text-slate-300 ml-2">
                        {variant.key_differences.map((diff, i) => (
                          <li key={i}>{diff}</li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );
}